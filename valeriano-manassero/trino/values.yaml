image:
  repository: trinodb/trino
  tag: 380
  pullPolicy: IfNotPresent
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000

imagePullSecrets: []
# For example:
# imagePullSecrets:
#   - name: registry-credentials

ingress:
  enabled: false
  ingressClassName:
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  host: ""
  tls:
    secretName: ""

config:
  general:
    node:
      environment: production
      dataDir: /data/trino
      pluginDir: /usr/lib/trino/plugin
    log:
      trino:
        level: INFO
    path: /etc/trino
    http:
      port: 8080
    processForwarded: false
    # -- Trino supports multiple authentication types: PASSWORD, CERTIFICATE, OAUTH2, JWT, KERBEROS
    # For more info: https://trino.io/docs/current/security/authentication-types.html
    authenticationType: ""
    httpsServer:
      enabled: false
      port: 8443
      keystore:
        path: "/usr/local/certs/clustercoord.pem"
        # JKS keystores always require a password, while PEM format certificates can optionally require a password
        key: ""
    internalCommunicationSharedSecret: some-secret
    query:
      maxMemory: "3GB"
      maxMemoryPerNode: "1GB"
      maxTotalMemory: "6GB"
    prestoCompatibleHeader: false

  coordinator:
    replicas: 1
    env: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
    initContainers: {}
    #   - name: init-coordinator
    #     image: busybox:1.28
    #     imagePullPolicy: IfNotPresent
    #     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
    jvm:
      maxHeapSize: "24G"
      gcMethod:
        type: "UseG1GC"
        g1:
          heapRegionSize: "32M"
    jvmExtraConfig: ""
    extraConfig: ""

  worker:
    # -- Replica count when autoscaler is disabled. If autoscaler is enabled, it sets minimum number of replicas.
    replicas: 2
    env: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
    initContainers: {}
    # worker:
    #   - name: init-worker
    #     image: busybox:1.28
    #     command: ['sh', '-c', 'echo The worker is running! && sleep 3600']
    jvm:
      maxHeapSize: "10G"
      gcMethod:
        type: "UseG1GC"
        g1:
          heapRegionSize: "32M"
    jvmExtraConfig: ""
    extraConfig: ""
    autoscaler:
      enabled: false
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50

auth: {}
  # Set username and password
  # https://trino.io/docs/current/security/password-file.html#file-format
  # passwordAuth: "username:encrypted-password-with-htpasswd"

accessControl: {}
  # # Supported types: pvc or configmap
  # type: pvc
  # refreshPeriod: 1s
  # # Rules file is mounted to /etc/trino/access-control
  # configFile: "/access-control/rules.json"
  # # If you use pvc as the type, you have to specify the pvcName field:
  # pvcName:
  # # If you use pvc as the type, you can specify the name of the volume with the pvcVolumeName:
  # pvcVolumeName:
  # # If you use configmap as the type, you have to specify the rules field:
  # rules:
  #   rules.json: |-
  #     {
  #       "catalogs": [
  #         {
  #           "user": "admin",
  #           "catalog": "(mysql|system)",
  #           "allow": "all"
  #         },
  #         {
  #           "group": "finance|human_resources",
  #           "catalog": "postgres",
  #           "allow": true
  #         },
  #         {
  #           "catalog": "hive",
  #           "allow": "all"
  #         },
  #         {
  #           "user": "alice",
  #           "catalog": "postgresql",
  #           "allow": "read-only"
  #         },
  #         {
  #           "catalog": "system",
  #           "allow": "none"
  #         }
  #       ],
  #       "schemas": [
  #         {
  #           "user": "admin",
  #           "schema": ".*",
  #           "owner": true
  #         },
  #         {
  #           "user": "guest",
  #           "owner": false
  #         },
  #         {
  #           "catalog": "default",
  #           "schema": "default",
  #           "owner": true
  #         }
  #       ]
  #     }

resourceGroups: {}
  # # Supported types: pvc or configmap
  # type: pvc
  # # Rules file is mounted to /etc/trino/resource-groups
  # configFile: "/resource-groups/resource-groups.json"
  # # If you use pvc as the type, you have to specify the pvcName field:
  # pvcName:
  # # If you use pvc as the type, you can specify the name of the volume with the pvcVolumeName:
  # pvcVolumeName:
  # # If you use configmap as the type, you have to specify the rules field:
  # rules:
  #   resource-groups.json: |-
  #     {
  #       "rootGroups": [
  #         {
  #           "name": "global",
  #           "softMemoryLimit": "80%",
  #           "hardConcurrencyLimit": 100,
  #           "maxQueued": 1000,
  #           "schedulingPolicy": "weighted",
  #           "jmxExport": true,
  #           "subGroups": [
  #             {
  #               "name": "data_definition",
  #               "softMemoryLimit": "10%",
  #               "hardConcurrencyLimit": 5,
  #               "maxQueued": 100,
  #               "schedulingWeight": 1
  #             },
  #             {
  #               "name": "adhoc",
  #               "softMemoryLimit": "10%",
  #               "hardConcurrencyLimit": 50,
  #               "maxQueued": 1,
  #               "schedulingWeight": 10,
  #               "subGroups": [
  #                 {
  #                   "name": "other",
  #                   "softMemoryLimit": "10%",
  #                   "hardConcurrencyLimit": 2,
  #                   "maxQueued": 1,
  #                   "schedulingWeight": 10,
  #                   "schedulingPolicy": "weighted_fair",
  #                   "subGroups": [
  #                     {
  #                       "name": "${USER}",
  #                       "softMemoryLimit": "10%",
  #                       "hardConcurrencyLimit": 1,
  #                       "maxQueued": 100
  #                     }
  #                   ]
  #                 },
  #                 {
  #                   "name": "bi-${toolname}",
  #                   "softMemoryLimit": "10%",
  #                   "hardConcurrencyLimit": 10,
  #                   "maxQueued": 100,
  #                   "schedulingWeight": 10,
  #                   "schedulingPolicy": "weighted_fair",
  #                   "subGroups": [
  #                     {
  #                       "name": "${USER}",
  #                       "softMemoryLimit": "10%",
  #                       "hardConcurrencyLimit": 3,
  #                       "maxQueued": 10
  #                     }
  #                   ]
  #                 }
  #               ]
  #             },
  #             {
  #               "name": "pipeline",
  #               "softMemoryLimit": "80%",
  #               "hardConcurrencyLimit": 45,
  #               "maxQueued": 100,
  #               "schedulingWeight": 1,
  #               "jmxExport": true,
  #               "subGroups": [
  #                 {
  #                   "name": "pipeline_${USER}",
  #                   "softMemoryLimit": "50%",
  #                   "hardConcurrencyLimit": 5,
  #                   "maxQueued": 100
  #                 }
  #               ]
  #             }
  #           ]
  #         },
  #         {
  #           "name": "admin",
  #           "softMemoryLimit": "100%",
  #           "hardConcurrencyLimit": 50,
  #           "maxQueued": 100,
  #           "schedulingPolicy": "query_priority",
  #           "jmxExport": true
  #         }
  #       ],
  #       "selectors": [
  #         {
  #           "user": "bob",
  #           "group": "admin"
  #         },
  #         {
  #           "userGroup": "admin",
  #           "group": "admin"
  #         },
  #         {
  #           "source": ".*pipeline.*",
  #           "queryType": "DATA_DEFINITION",
  #           "group": "global.data_definition"
  #         },
  #         {
  #           "source": ".*pipeline.*",
  #           "group": "global.pipeline.pipeline_${USER}"
  #         },
  #         {
  #           "source": "jdbc#(?<toolname>.*)",
  #           "clientTags": ["hipri"],
  #           "group": "global.adhoc.bi-${toolname}.${USER}"
  #         },
  #         {
  #           "group": "global.adhoc.other.${USER}"
  #         }
  #       ],
  #       "cpuQuotaPeriod": "1h"
  #     }

# If you want to provide your own secrets resource, you can use this field:
# connectorsSecret:

connectors: {}
  # Connectors configuration usually contains sensitive data (like passwords, usernames, ...)
  # so data is stored in a secret
  # mysql.properties: |-
  #   connector.name=mysql
  #   connection-url=jdbc:mysql://mysqlserver:3306
  #   connection-user=mysqluser
  #   connection-password=mysqlpassword
  # elk.properties: |-
  #   connector.name=elasticsearch
  #   elasticsearch.host=elasticsearchserver
  #   elasticsearch.port=9200
  #   elasticsearch.default-schema-name=default
  #   elasticsearch.security=PASSWORD
  #   elasticsearch.auth.user=elastiuser
  #   elasticsearch.auth.password=elasticpassword
  #   elasticsearch.tls.enabled=true

schemas: {}
  # Custom schemas that will be mounted in /etc/trino/schemas
  # testschema.json: |-
  #   {
  #     "tableName": "testtable",
  #     "schemaName": "testschema",
  #     "topicName": "testtopic",
  #     "key": {
  #         "dataFormat": "json",
  #         "fields": [
  #             {
  #                 "name": "_key",
  #                 "dataFormat": "VARCHAR",
  #                 "type": "VARCHAR",
  #                 "hidden": "false"
  #             }
  #         ]
  #     },
  #     "message": {
  #         "dataFormat": "json",
  #         "fields": [
  #             {
  #                 "name": "id",
  #                 "mapping": "id",
  #                 "type": "BIGINT"
  #             },
  #             {
  #                 "name": "test_field",
  #                 "mapping": "test_field",
  #                 "type": "VARCHAR"
  #             }
  #         ]
  #     }
  #   }

service:
  type: ClusterIP

secretMounts: []
  # - name: ssl-cert
  #   secretName: ssl-cert
  #   path: /usr/local/certs/
  # - name: ssh-key
  #   secretName: ssh-key
  #   path: /home/trino/.ssh/id_rsa.pub
  #   subPath: id_rsa.pub

configMapMounts: []
  # - name: ssh-config
  #   configMapName: ssh-config
  #   path: /home/trino/.ssh/config
  #   subPath: config

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
